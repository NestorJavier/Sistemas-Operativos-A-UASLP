// threadtest.cc 
//	Simple test case for the threads assignment.
//
//	Create two threads, and have them context switch
//	back and forth between themselves by calling Thread::Yield, 
//	to illustratethe inner workings of the thread system.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"

//----------------------------------------------------------------------
// SimpleThread
// 	Loop 5 times, yielding the CPU to another ready thread 
//	each iteration.
//
//	"which" is simply a number identifying the thread, for debugging
//	purposes.
//----------------------------------------------------------------------

void
SimpleThread(int which)
{
    int num;
    
    for (num = 0; num < 5; num++) {
	printf("*** thread %d looped %d times\n", which, num);
        currentThread->Yield();
    }
}

//----------------------------------------------------------------------
// ThreadTest
// 	Set up a ping-pong between two threads, by forking a thread 
//	to call SimpleThread, and then calling SimpleThread ourselves.
//----------------------------------------------------------------------

void
ThreadTest()
{
	int opcion, buffer[6], num;
	Thread *t1, *t2, *t3;
	
    DEBUG('t', "Entering SimpleTest");

	
	printf("		MENU\n");
	printf("		1.- SimpleThread\n");
	printf("		2.- Ejemplo de hilos (FCFS)\n");
	printf("		3.- Salir\n");
	printf("		Opcion:");	
	scanf("%d", &opcion);
	
	switch(opcion)
	{
		case 1:
		    t1 = new Thread("forked thread");
		    t2 = new Thread("forked thread");
		    t3 = new Thread("forked thread");
		    t1->Fork(SimpleThread, 1);
		    t2->Fork(SimpleThread, 2);
		    t3->Fork(SimpleThread, 3);
		break;
		case 2:
		    printf("Ingrese 6 numeros:\n");	
		    scanf("%d", &num);
		    buffer[0] = num;
		    scanf("%d", &num);
		    buffer[1] = num;
		    scanf("%d", &num);
		    buffer[2] = num;
		    scanf("%d", &num);
		    buffer[3] = num;
		    scanf("%d", &num);
		    buffer[4] = num;
		    scanf("%d", &num);
		    buffer[5] = num;
		break;
	}
    
    //SimpleThread(0);
}

